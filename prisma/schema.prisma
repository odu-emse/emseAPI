generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  openID     String    @unique
  email      String
  picURL     String?
  createdAt  DateTime  @default(now())
  firstName  String
  lastName   String
  middleName String?
  dob        DateTime? @default(now())
  isAdmin    Boolean   @default(false)
  isActive   Boolean   @default(false)

  // Relation fields
  social            Social?            @relation(name: "social")
  plan              PlanOfStudy?       @relation(name: "plan")
  tokens            Token[]
  feedback          ModuleFeedback[]
  assignmentGraded  AssignmentResult[] @relation(name: "graded")
  instructorProfile InstructorProfile?
  watchedThreads    Thread[]           @relation(fields: [watchedThreadIDs], references: [id])
  watchedThreadIDs  String[]           @default([]) @db.ObjectId
  createdThreads    Thread[]           @relation(name: "createdThreads")
  
  upvotedThreads   Thread[] @relation(name: "upvote", fields: [upvotedThreadIDs], references: [id])
  upvotedThreadIDs String[] @default([]) @db.ObjectId
}

model InstructorProfile {
  id                            String  @id @default(auto()) @map("_id") @db.ObjectId
  account                       User?   @relation(fields: [accountID], references: [id])
  accountID                     String? @unique @db.ObjectId
  title                         String?
  officeLocation                String?
  officeHours                   String?
  contactPolicy                 String?
  phone                         String?
  background                    String?
  researchInterest              String?
  selectedPapersAndPublications String?
  personalWebsite               String?
  philosophy                    String?
}

model PlanOfStudy {
  id                String             @id @default(auto()) @map("_id") @db.ObjectId
  student           User?              @relation(name: "plan", fields: [studentID], references: [id])
  studentID         String?            @unique @db.ObjectId
  // ill figure advisors out later, my brain needs a rest
  // advisor           User?              @relation(fields: [advisorId], references:[id])
  // advisorId         String?            @db.ObjectId
  modules           ModuleEnrollment[]
  assignmentResults AssignmentResult[]
}

model Social {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  twitter   String?
  github    String?
  linkedin  String?
  facebook  String?
  portfolio String?
  account   User?   @relation(name: "social", fields: [accountID], references: [id])
  accountID String? @unique @db.ObjectId
}

model Token {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  valid      Boolean  @default(true)
  expiration DateTime

  // Relation fields
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Course {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  moduleIDs String[] @db.ObjectId
  module    Module[] @relation(fields: [moduleIDs], references: [id])
}

model Module {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  moduleNumber Int      @unique
  moduleName   String   @unique
  description  String
  duration     Float
  intro        String
  numSlides    Int
  keywords     String[]
  objectives   String[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt

  // Relation fields
  members     ModuleEnrollment[]
  assignments Assignment[]
  feedback    ModuleFeedback[]

  parentModules   Module[]     @relation("parentModules", fields: [parentModuleIDs], references: [id])
  parentModuleIDs String[]     @default([]) @db.ObjectId
  subModules      Module[]     @relation("parentModules", fields: [subModuleIDs], references: [id])
  subModuleIDs    String[]     @default([]) @db.ObjectId
  collections     Collection[] @relation(name: "collections")

  courseIDs String[] @default([]) @db.ObjectId
  course    Course[] @relation(fields: [courseIDs], references: [id])
}

model Collection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  position  Int      @default(0)

  // Relation fields
  lessons  Lesson[]
  module   Module   @relation(name: "collections", fields: [moduleID], references: [id], onDelete: Cascade)
  moduleID String   @db.ObjectId
}

model Lesson {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  transcript   String?
  threads      Thread[]
  // TODO: Should not be empty EVER
  collection   Collection? @relation(fields: [collectionID], references: [id], onDelete: Cascade)
  collectionID String?     @db.ObjectId
  position     Int         @default(0)

  content Content[]
}

model ModuleFeedback {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  feedback String
  rating   Int

  studentId String @db.ObjectId
  moduleId  String @db.ObjectId
  student   User   @relation(fields: [studentId], references: [id])
  module    Module @relation(fields: [moduleId], references: [id])
}

model ModuleEnrollment {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  enrolledAt DateTime         @default(now())
  role       UserRole //Allow for instructors, graders and students to take part in the module.
  status     EnrollmentStatus @default(INACTIVE)

  // Relation Fields
  module   Module       @relation(fields: [moduleId], references: [id])
  moduleId String       @db.ObjectId
  plan     PlanOfStudy? @relation(fields: [planID], references: [id])
  planID   String?      @db.ObjectId
  progress Progress?
}

model Assignment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt DateTime @default(now()) @updatedAt
  name      String
  dueAt     DateTime

  // Relation Fields
  moduleId          String             @db.ObjectId
  module            Module             @relation(fields: [moduleId], references: [id])
  assignmentResults AssignmentResult[]
}

model AssignmentResult {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  submittedAt DateTime @default(now())
  result      Float
  feedback    String?

  // Relation Fields
  studentId    String      @db.ObjectId
  student      PlanOfStudy @relation(fields: [studentId], references: [id])
  graderId     String      @db.ObjectId //Same thing as the advisor, issue here, technically this should work but there is now a reference in User that doesnt need to exist maybe a module enrollment relation works better?
  gradedBy     User        @relation(name: "graded", fields: [graderId], references: [id])
  assignmentId String      @db.ObjectId
  assignment   Assignment  @relation(fields: [assignmentId], references: [id])
}

model Thread {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime @default(now())
  updatedAt      DateTime @default(now()) @updatedAt
  title          String?
  body           String
  usersWatching  User[]   @relation(fields: [watcherID], references: [id])
  watcherID      String[] @default([]) @db.ObjectId
  author         User     @relation(name: "createdThreads", fields: [authorID], references: [id])
  authorID       String   @db.ObjectId
  parentLesson   Lesson?  @relation(fields: [parentLessonID], references: [id])
  parentLessonID String?  @db.ObjectId

  parentThread   Thread?  @relation("subComments", fields: [parentThreadID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentThreadID String?  @db.ObjectId
  comments       Thread[] @relation("subComments")

  upvotes       User[]   @relation(name: "upvote", fields: [upvoteUserIDs], references: [id])
  upvoteUserIDs String[] @default([]) @db.ObjectId
}

model Content {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  type     String
  link     String
  parent   Lesson @relation(fields: [parentID], references: [id])
  parentID String @db.ObjectId
}

model Progress {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @default(now()) @updatedAt
  status       Float            @default(0)
  completed    Boolean          @default(false)
  // Relation Fields
  enrollment   ModuleEnrollment @relation(fields: [enrollmentID], references: [id], onDelete: Cascade)
  enrollmentID String           @unique
}

enum UserRole {
  STUDENT
  TEACHER
  GRADER
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
}

// Dont need this anymore since we arent doing API Tokens
// enum TokenType {
//   EMAIL // used as a short lived token sent to the user's email
//   API
// }

// I have no clue what this is for, wasnt in the Req. Document so its getting commented out unless it breaks something when i do
// model Post {
//     id        String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
//     title     String
//     content   String
//     published Boolean  @default(false)
//     createdAt DateTime @default(now())
// }
