generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["mongodb"]
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  email        String   @unique
  createdAt    DateTime @default(now())
  firstName    String
  lastName     String
  middleName   String?
  prefix       String?
  password     String
  passwordConf String
  isAdmin      Boolean  @default(false)

  // Relation fields
  social           Social?            @relation(name: "social")
  plan             PlanOfStudy?       @relation(name: "plan")
  tokens           Token[]
  feedback         ModuleFeedback[]
  assignmentGraded AssignmentResult[] @relation(name: "graded")
}

model PlanOfStudy {
  id                String             @id @default(dbgenerated()) @map("_id") @db.ObjectId
  student           User?              @relation(name: "plan", fields: [studentID], references: [id])
  studentID         String?            @db.ObjectId
  modules           ModuleEnrollment[]
  assignmentResults AssignmentResult[] @relation(name: "results")
}

model Social {
  id        String  @id @default(dbgenerated()) @map("_id") @db.ObjectId
  twitter   String?
  github    String?
  linkedin  String?
  facebook  String?
  portfolio String?
  account   User?   @relation(name: "social", fields: [accountID], references: [id])
  accountID String? @db.ObjectId
}

model Token {
  id         String    @id @default(dbgenerated()) @map("_id") @db.ObjectId
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  type       TokenType
  emailToken String?   @unique // Only used for short lived email tokens
  valid      Boolean   @default(true)
  expiration DateTime

  // Relation fields
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Module {
  id            String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  moduleNumber  Int      @unique
  moduleName    String   @unique
  description   String
  duration      Float
  intro         String
  numSlides     Int
  rating        Int[]
  keywords      String[]
  hasAssignment Boolean
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  // assignments   Assignment[]
  // instructor    Account       @relation(fields: [instructorID], references: [id])
  // instructorID  String        @unique @db.ObjectId
  // student       PlanOfStudy[]

  // Relation fields
  members     ModuleEnrollment[]
  assignments Assignment[]
  feedback    ModuleFeedback[]
}

model ModuleFeedback {
  id       String @id @default(dbgenerated()) @map("_id") @db.ObjectId
  feedback String
  rating   Int

  studentId String @db.ObjectId
  moduleId  String @db.ObjectId
  student   User   @relation(fields: [studentId], references: [id])
  module    Module @relation(fields: [moduleId], references: [id])
}

model ModuleEnrollment {
  id         String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  enrolledAt DateTime @default(now())
  role       UserRole

  // Relation Fields
  module   Module      @relation(fields: [moduleId], references: [id])
  moduleId String      @db.ObjectId
  plan     PlanOfStudy @relation(fields: [planId], references: [id])
  planId   String      @db.ObjectId
}

model Assignment {
  id        String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  updatedAt DateTime @updatedAt
  name      String
  date      DateTime
  dueAt     DateTime

  // Relation Fields
  moduleId          String             @db.ObjectId
  module            Module             @relation(fields: [moduleId], references: [id])
  assignmentResults AssignmentResult[]
}

model AssignmentResult {
  id          String   @id @default(dbgenerated()) @map("_id") @db.ObjectId
  submittedAt DateTime @default(now())
  result      Float

  // Relation Fields
  studentId    String      @db.ObjectId
  student      PlanOfStudy @relation(name: "results", fields: [studentId], references: [id])
  graderId     String      @db.ObjectId
  gradedBy     User        @relation(name: "graded", fields: [graderId], references: [id])
  assignmentId String      @db.ObjectId
  assignment   Assignment  @relation(fields: [assignmentId], references: [id])
}

enum UserRole {
  STUDENT
  TEACHER
  GRADER
}

enum TokenType {
  EMAIL // used as a short lived token sent to the user's email
  API
}


model Post {
    id        String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
    title     String
    content   String
    published Boolean  @default(false)
    createdAt DateTime @default(now())
}