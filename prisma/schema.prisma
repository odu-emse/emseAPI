generator client {
  provider        = "prisma-client-js"
  previewFeatures = []
  binaryTargets   = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator dbml {
  provider = "prisma-dbml-generator"
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  openID      String    @unique
  email       String
  picURL      String?
  createdAt   DateTime  @default(now())
  firstName   String
  lastName    String
  middleName  String?
  dob         DateTime? @default(now())
  isAdmin     Boolean   @default(false)
  isActive    Boolean   @default(false)
  biography   String?
  phoneNumber String?

  // Relation fields
  social             Social?            @relation(name: "social")
  plan               PlanOfStudy?       @relation(name: "plan")
  tokens             Token[]
  feedback           SectionFeedback[]
  assignmentGraded   AssignmentResult[] @relation(name: "graded")
  instructorProfile  InstructorProfile?
  watchedThreads     Thread[]           @relation(fields: [watchedThreadIDs], references: [id])
  watchedThreadIDs   String[]           @default([]) @db.ObjectId
  createdThreads     Thread[]           @relation(name: "createdThreads")
  sentMessages       DirectMessage[]    @relation(name: "sentMessages")
  receivedMessages   DirectMessage[]    @relation(name: "receivedMessages")
  groupMemeberships  Group[]            @relation(name: "groupMemeberships", fields: [groupMembershipIDs], references: [id])
  groupMembershipIDs String[]           @default([]) @db.ObjectId
  upvotedThreads     Thread[]           @relation(name: "upvote", fields: [upvotedThreadIDs], references: [id])
  upvotedThreadIDs   String[]           @default([]) @db.ObjectId
}

model InstructorProfile {
  id                            String   @id @default(auto()) @map("_id") @db.ObjectId
  account                       User?    @relation(fields: [accountID], references: [id])
  accountID                     String?  @unique @db.ObjectId
  title                         String?
  officeLocation                String?
  officeHours                   String[] @default([])
  contactPolicy                 String?
  background                    String?
  researchInterest              String[] @default([])
  selectedPapersAndPublications String[] @default([])
}

model PlanOfStudy {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  student           User?               @relation(name: "plan", fields: [studentID], references: [id])
  studentID         String?             @unique @db.ObjectId
  // ill figure advisors out later, my brain needs a rest
  // advisor           User?              @relation(fields: [advisorId], references:[id])
  // advisorId         String?            @db.ObjectId
  sections          SectionEnrollment[]
  assignmentResults AssignmentResult[]
  quizResults       QuizResult[]
  learningPaths     LearningPath[]
}

model Social {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  twitter   String?
  github    String?
  linkedin  String?
  facebook  String?
  portfolio String?
  account   User?   @relation(name: "social", fields: [accountID], references: [id])
  accountID String? @unique @db.ObjectId
}

model Token {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  valid      Boolean  @default(true)
  expiration DateTime

  // Relation fields
  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId
}

model Course {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  required      Boolean?  @default(false)
  carnegieHours Int?      @default(135)
  sectionIDs    String[]  @default([]) @db.ObjectId
  sections      Section[] @relation(fields: [sectionIDs], references: [id])
}

model Section {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  sectionNumber Int      @unique
  sectionName   String   @unique
  description   String
  duration      Float
  intro         String
  numSlides     Int
  keywords      String[]
  objectives    String[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt

  // Relation fields
  members     SectionEnrollment[]
  assignments Assignment[]
  feedback    SectionFeedback[]

  parentSections   Section[]    @relation("parentModules", fields: [parentSectionIDs], references: [id])
  parentSectionIDs String[]     @default([]) @db.ObjectId
  subSections      Section[]    @relation("parentModules", fields: [subSectionIDs], references: [id])
  subSectionIDs    String[]     @default([]) @db.ObjectId
  collections      Collection[] @relation(name: "collections")

  courseIDs String[] @default([]) @db.ObjectId
  course    Course[] @relation(fields: [courseIDs], references: [id])
}

model Collection {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  position  Int      @default(0)

  // Relation fields
  modules   Module[] @relation(fields: [moduleIDs], references: [id])
  moduleIDs String[] @default([]) @db.ObjectId
  section   Section  @relation(name: "collections", fields: [sectionID], references: [id], onDelete: Cascade)
  sectionID String   @db.ObjectId
}

model Module {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  collections   Collection[] @relation(fields: [collectionIDs], references: [id])
  collectionIDs String[]     @default([]) @db.ObjectId
  position      Int          @default(0)
  objectives    String[]     @default([])
  hours         Float        @default(0.0)

  content        Content[]
  quizzes        Quiz[]
  moduleProgress ModuleProgress[]
}

model SectionFeedback {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  feedback String
  rating   Int

  studentId String  @db.ObjectId
  sectionId String  @db.ObjectId
  student   User    @relation(fields: [studentId], references: [id])
  section   Section @relation(fields: [sectionId], references: [id])
}

model SectionEnrollment {
  id         String           @id @default(auto()) @map("_id") @db.ObjectId
  enrolledAt DateTime         @default(now())
  role       UserRole // Allow for instructors, graders and students to take part in the module.
  status     EnrollmentStatus @default(INACTIVE)

  // Relation Fields
  section        Section          @relation(fields: [sectionId], references: [id])
  sectionId      String           @db.ObjectId
  plan           PlanOfStudy?     @relation(fields: [planID], references: [id])
  planID         String?          @db.ObjectId
  progress       Progress?
  moduleProgress ModuleProgress[]
}

model Assignment {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  updatedAt     DateTime @default(now()) @updatedAt
  name          String
  dueAt         DateTime
  contentURL    String
  contentType   String
  acceptedTypes FileType @default(DOC)

  // Relation Fields
  sectionId         String             @db.ObjectId
  section           Section            @relation(fields: [sectionId], references: [id])
  assignmentResults AssignmentResult[]
}

model AssignmentResult {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  submittedAt   DateTime @default(now())
  result        Float
  feedback      String?
  submissionURL String
  fileType      String

  // Relation Fields
  studentId    String      @db.ObjectId
  student      PlanOfStudy @relation(fields: [studentId], references: [id])
  graderId     String      @db.ObjectId // Same thing as the advisor, issue here, technically this should work but there is now a reference in User that doesnt need to exist maybe a module enrollment relation works better?
  gradedBy     User        @relation(name: "graded", fields: [graderId], references: [id])
  assignmentId String      @db.ObjectId
  assignment   Assignment  @relation(fields: [assignmentId], references: [id])
}

model Thread {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  title         String?
  body          String
  usersWatching User[]   @relation(fields: [watcherID], references: [id])
  watcherID     String[] @default([]) @db.ObjectId
  author        User     @relation(name: "createdThreads", fields: [authorID], references: [id])
  authorID      String   @db.ObjectId
  topics        String[] @default([])

  parentThread   Thread?  @relation("subComments", fields: [parentThreadID], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentThreadID String?  @db.ObjectId
  comments       Thread[] @relation("subComments")

  upvotes       User[]   @relation(name: "upvote", fields: [upvoteUserIDs], references: [id])
  upvoteUserIDs String[] @default([]) @db.ObjectId
}

model Content {
  id       String      @id @default(auto()) @map("_id") @db.ObjectId
  type     ContentType
  link     String
  parent   Module      @relation(fields: [parentID], references: [id], onDelete: Cascade)
  parentID String      @db.ObjectId
  primary  Boolean
}

model DirectMessage {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  body        String
  author      User     @relation(name: "sentMessages", fields: [authorID], references: [id])
  authorID    String   @db.ObjectId
  recipient   User?    @relation(name: "receivedMessages", fields: [recipientID], references: [id])
  recipientID String?  @db.ObjectId
  group       Group?   @relation(name: "groupMessages", fields: [groupID], references: [id])
  groupID     String?  @db.ObjectId
}

model Group {
  id        String          @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime        @default(now())
  updatedAt DateTime        @default(now()) @updatedAt
  name      String
  public    Boolean         @default(false)
  members   User[]          @relation(name: "groupMemeberships", fields: [memberIDs], references: [id])
  memberIDs String[]        @default([]) @db.ObjectId
  messages  DirectMessage[] @relation(name: "groupMessages")
}

model Progress {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  status       Float             @default(0)
  completed    Boolean           @default(false)
  // Relation Fields
  enrollment   SectionEnrollment @relation(fields: [enrollmentID], references: [id], onDelete: Cascade)
  enrollmentID String            @unique @db.ObjectId
}

model ModuleProgress {
  id           String            @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @default(now()) @updatedAt
  status       Float             @default(0)
  completed    Boolean           @default(false)
  module       Module            @relation(fields: [moduleID], references: [id], onDelete: Cascade)
  moduleID     String            @db.ObjectId
  // Relation Fields
  enrollment   SectionEnrollment @relation(fields: [enrollmentID], references: [id], onDelete: Cascade)
  enrollmentID String            @unique @db.ObjectId
}

model Quiz {
  id             String         @id @default(auto()) @map("_id") @db.ObjectId
  totalPoints    Float
  instructions   String?
  dueAt          DateTime?
  timeLimit      Int?
  numQuestions   Int
  minScore       Float          @default(0.0)
  parentModule   Module         @relation(fields: [parentModuleID], references: [id], onDelete: Cascade)
  parentModuleID String         @db.ObjectId
  questionPool   Question[]
  instances      QuizInstance[]
}

model QuizInstance {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  quiz         Quiz        @relation(fields: [quizID], references: [id], onDelete: Cascade)
  quizID       String      @db.ObjectId
  questions    Question[]  @relation(fields: [questionIDs], references: [id])
  questionIDs  String[]    @default([]) @db.ObjectId
  quizResult   QuizResult? @relation(fields: [quizResultID], references: [id])
  quizResultID String?     @unique @db.ObjectId
}

model Question {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  number      Int
  variant     Int            @default(1)
  text        String
  points      Float          @default(1.0)
  answers     Answer[]
  parent      Quiz           @relation(fields: [parentID], references: [id], onDelete: Cascade)
  parentID    String         @db.ObjectId
  instances   QuizInstance[] @relation(fields: [instanceIDs], references: [id])
  instanceIDs String[]       @default([]) @db.ObjectId
}

model Answer {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  text             String
  correct          Boolean
  weight           Float?
  index            String?
  parentQuestion   Question @relation(fields: [parentQuestionID], references: [id], onDelete: Cascade)
  parentQuestionID String   @db.ObjectId
}

model QuizResult {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  score       Float
  // answers     String[]
  submittedAt DateTime @default(now())

  student      PlanOfStudy   @relation(fields: [studentID], references: [id])
  studentID    String        @db.ObjectId
  quizInstance QuizInstance?
}

model LearningPath {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime    @default(now())
  plan      PlanOfStudy @relation(fields: [planID], references: [id], onDelete: Cascade)
  planID    String      @db.ObjectId
  paths     Path[]

  @@unique([planID])
}

type Path {
  id               String
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @default(now())
  course           CoursePath
  status           PathStatus? @default(DRAFT)
  hoursSatisfies   Float?      @default(0.0)
  learningOutcomes String[]    @default([])
}

type CoursePath {
  id       String
  sections SectionPath[]
}

type SectionPath {
  id          String
  name        String
  collections CollectionPath[]
}

type CollectionPath {
  id      String
  name    String
  modules ModulePath[]
}

type ModulePath {
  id           String
  enrollmentID String
}

enum UserRole {
  STUDENT
  TEACHER
  GRADER
}

enum EnrollmentStatus {
  ACTIVE
  INACTIVE
}

enum ContentType {
  PDF
  DOC
  DOCX
  VIDEO
  CAPTION
  TRANSCRIPT
  QUIZ
  TEXT
}

enum FileType {
  DOCX
  DOC
  PDF
  TTT
  TXT
}

enum PathStatus {
  DRAFT
  LIVE
}

// Dont need this anymore since we arent doing API Tokens
// enum TokenType {
//   EMAIL // used as a short lived token sent to the user's email
//   API
// }

// I have no clue what this is for, wasnt in the Req. Document so its getting commented out unless it breaks something when i do
// model Post {
//     id        String      @id @default(dbgenerated()) @map("_id") @db.ObjectId
//     title     String
//     content   String
//     published Boolean  @default(false)
//     createdAt DateTime @default(now())
// }
