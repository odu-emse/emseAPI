type Social {
	id: ID!
	twitter: String
	github: String
	linkedin: String
	facebook: String
	portfolio: String
	account: User!
}

type User {
	id: ID!
	email: String
	createdAt: String
	firstName: String
	lastName: String
	middleName: String
	prefix: String
	password: String
	passwordConf: String
	isAdmin: Boolean
	isActive: Boolean

	social: Social
	plan: PlanOfStudy
	tokens: [ID!]
	feedback: [ModuleFeedback!]
	assignmentGraded: [AssignmentResult!]
}

type Error {
	message: String
}

input NewUser {
	email: String!
	firstName: String!
	lastName: String!
	middleName: String!
	prefix: String
	password: String!
	passwordConf: String!
}

input UpdateUser {
	id: ID!
	email: String
	firstName: String
	lastName: String
	middleName: String
	prefix: String
	password: String
	passwordConf: String
	isAdmin: Boolean
	isActive: Boolean
}

input SocialInput {
	twitter: String
	github: String
	linkedin: String
	facebook: String
	portfolio: String
}

type Query {
	user(id: ID!): User
	users: [User!]!

	socials: [Social!]!
	social(id: ID!): Social
}

type Mutation {
	deleteUser(id: ID!): User
	createUser(input: NewUser): User!
	updateUser(input: UpdateUser): User

	addSocial(user: ID!, input: SocialInput): Social!
	updateSocial(id: ID!, input: SocialInput!): Social
	updateUserSocial(userId: ID!, input: SocialInput!): Social
	deleteSocial(id: ID!): Social
	deleteUserSocial(userId: ID!): Social
}
