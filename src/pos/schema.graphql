type PlanOfStudy {
	id: ID!
	"""
	Name of the Student Account
	"""
	student: User

	"""
	Sections that are enrolled by the Student
	"""
	sections: [SectionEnrollment]

	"""
	Results obtained for the Assignement Taken
	"""
	assignmentResults: [AssignmentResult!]

	"""
	Sections to be completed
	"""
	sectionsLeft:[SectionEnrollment]

	"""
	Results on quizzes taken
	"""
	quizResults: [QuizResult!]
}

input PlanInput {
    student: ID
}

input PlanFields {
	id: String
	
	student: String
	section: String
	assignmentResult: String
	sectionsLeft: String
}

type Query {
	"""
	student PlanOfStudy by id
	"""
	plan(studentID: ID!): PlanOfStudy

	"""
	All the plans in the PlanOfStudy
	"""
	plans: [PlanOfStudy!]
	
	"""
	PlanOfStudy by the Documentid
	"""
	planByID(id: String!): PlanOfStudy

	planByParams(input: PlanFields): [PlanOfStudy!]
}

type Mutation {
	"""
	Plan added to present PlanOfStudy
	"""
	addPlan(input: PlanInput): PlanOfStudy!
	
	"""
	Updating the PlanOfStudy
	"""
	updatePlan(id: ID!, input: PlanInput): PlanOfStudy
	
	"""
	Deleting the PlanOfStudy
	"""
	deletePlan(id: ID!): PlanOfStudy
	
}