enum UserRole {
    STUDENT
    TEACHER
    GRADER
}

enum EnrollmentStatus {
    ACTIVE
    INACTIVE
}
enum ContentType {
    PDF
    DOC
    DOCX
    VIDEO
    CAPTION
    TRANSCRIPT
    QUIZ
    TEXT
}


enum FileType {
    DOCX
    DOC
    PDF
    TTT
    TXT
}

type SectionEnrollment {
	"""
	id of the SectionEnrollment
	"""
	id: ID!

	"""
	TimeStamp at which the Section is enrolledAt
	"""
	enrolledAt: Date!

    """
    Role of the user:Either Student, Teacher or Grader
    """
    role: UserRole!

    """
    Status of the enrollment: Either Active or Inactive
    """
    status: EnrollmentStatus!

	"""
	Current Section
	"""
	section: Section!

    """
    Plan of study Chosen
    """
    plan: PlanOfStudy

	"""
	Inactive plan of study
	"""
	inactivePlan: PlanOfStudy
	"""
	The progress that this enrollment is associated with (one-to-one)
	"""
	progress: Progress!
	"""
	The progress model that is associated with this module
	"""
	moduleProgress: [ModuleProgress]
}

type AssignmentResult {
    """
    id of AssignmentResult
    """
    id: ID!

    """
    Time at which the Assignment Result is given
    """
    submittedAt: Date!

    """
    result of the Assignment
    """
    result: Float!

    """
    feedback given on the Assignment
    """
    feedback: String

    """
    s3 id of the submitted file
    """
    submissionURL: String

    """
    File type that the submission is in
    """
    fileType: String

    """
    Assignment Result of the student
    """
    student: PlanOfStudy

    """
    Assignment graded by the User
    """
    gradedBy: User

    """
    Assignment to which result is given
    """
    assignment: Assignment
}

type Assignment {
    """
    Assignment id
    """
    id: ID!

    """
    date and time at which assignment is updated
    """
    updatedAt: Date!

    """
    Name of the assignment
    """
    name: String!

    """
    due of the assignment
    """
    dueAt: Date

    """
    s3 id of the content
    """
    contentURL: String

    """
    File type that the assignment is submitted in
    """
    contentType: String

    """
    Accepted file types for assignments
    """
    acceptedTypes: FileType

	"""
	Assignment belonging to the Section
	"""
	section: Section!

    """
    Assignment Result
    """
    assignmentResults: [AssignmentResult]
}

type SectionFeedback {
	"""
	id of SectionFeedback
	"""
	id: ID!

	"""
	Feedback fo the Section
	"""
	feedback: String!

    """
    Rating given in the feedback
    """
    rating: Int!

	"""
	Section feedback given by the student
	"""
	student: User

	"""
	Section in which Section feedback is given
	"""
	section: Section
}

type Course {
	"""
	course id
	"""
	id: ID!
	"""
	Name of the course
	"""
	name: String!
	"""
	Sections in the course
	"""
	sectionIDs: [ID]
	"""
	Boolean value to check if the course is required/core or an elective
	"""
	required: Boolean!
	"""
	Number of Carnegie Unit and Student Hours that the course is worth
	"""
	carnegieHours: Int!
}

type Section {
	"""
	Section Id
	"""
	id: ID!

	"""
	Number of the Section
	"""
	sectionNumber: Int!

	"""
	Name of hte Section
	"""
	sectionName: String!

	"""
	Description of the Section
	"""
	description: String!

	"""
	Duration of the Section
	"""
	duration: Float!

	"""
	Introduction of the Section
	"""
	intro: String!

	"""
	No of slides in the Section
	"""
	numSlides: Int!

	"""
	Keywords in the Sections
	"""
	keywords: [String!]!

	"""
	objectives in the Sections
	"""
	objectives: [String!]!

	"""
	Date and Time of the Section Created at
	"""
	createdAt: Date!

	"""
	Date and Time of the Section Updated at
	"""
	updatedAt: Date!

	"""
	Assignement in the Section
	"""
	assignments: [Assignment!]!

	"""
	Memebers enrolled in the Section
	"""
	members: [SectionEnrollment!]!

	"""
	Feedback of the Section
	"""
	feedback: [SectionFeedback!]!

	"""
	Parent Sections of the Section
	"""
	parentSections: [Section!]!

	"""
	Child Sections in the Section
	"""
	subSections: [Section!]!
	"""
	A list of collections that have this Section's materials
	"""
	collections: [Collection!]!

    """
    courseIDs set
    """
    courseIDs: [ID!]!
}

type Collection {
    """
    id of the collection
    """
    id: ID!

    """
    Name of the collection
    """
    name: String!

    """
    Date and Time of the collection created at
    """
    createdAt: Date!

    """
    Date and Time of the collection updated at
    """
    updatedAt: Date!

	"""
	List of modules in the collection
	"""
	modules: [Module]

	"""
	The Section that this collection belongs to
	"""
	section: Section!
	"""
	The Section's unique ID that this collection belongs to
	"""
	sectionID: ID!
	"""
	The position index of the collection in a Section
	"""
	position: Int
}

type Module {
	"""
	document ID
	"""
	id: ID!
	"""
	Module Name
	"""
	name: String!
	"""
	The link/id of the actual content data itself
	"""
	content: [Content]
	"""
	The list of threads related to the module
	"""
	threads: [Thread]
	"""
	The collection that the module belongs to
	"""
	collection: Collection

	"""
	The position index of the module in the collection it belongs to.
	"""
	position: Int
	"""
	The quizzes that belong to this module
	"""
	quizzes: [Quiz!]
	"""
	The progress model that is associated with this module
	"""
	moduleProgress: [ModuleProgress]
	"""
	A list of learning objectives being covered in this Section
	"""
	objectives: 	[String!]!
  """
	The number of carnige hours granted for completion of this Section
	"""
	hours: Float!
}

type Content {
    """
    Document ID for this content
    """
    id: ID!

    """
    The type of content that this link/id references
    """
    type: ContentType!

    """
    The URL or other access point for the content being referenced. This will typically be an AWS s3 bucket ID
    """
    link: String!

	"""
	The module that this content belongs to.
	"""
	parent: Module!

    """
	Boolean property that marks each element in the content array of a module as either the primary content type or secondary resources
	"""
	primary: Boolean!

}

type Error {
    """
    Error message
    """
    message: String
}

type Query {
	"""
	Get a list of Sections given a set of parameters, passing an empty object in will recieve all and passing in an id will fetch a single document.
	Parameters can be any of the fields that exist in a Section
	An additional parameter: memberRole, can be provided to specify that Section members should only be selected if they have said role.
	"""
	section(input: SectionFields!, memberRole: UserRole): [Section!]

    """
    Get a list of courses given a set of parameters, passing an empty object in will recieve all and passing in an id will fetch a single document.
    Parameters can be any of the fields that exist in a course
    """
    course(input: CourseFields!): [Course!]

    """
    Get a list of assignments given a set of parameters, passing an empty object in will recieve all and passing in an id will fetch a single document.
    Parameters can be any of the fields that exist in a assignment
    """
    assignment(input: AssignmentFields!): [Assignment!]

	"""
	Get a list of SectionFeedbacks given a set of parameters, passing an empty object in will recieve all and passing in an id will fetch a single document.
	Parameters can be any of the fields that exist in a SectionFeedback
	"""
	sectionFeedback(input: ModFeedbackFields!): [SectionFeedback!]

    """
    Get a list of assignmentResults given a set of parameters, passing an empty object in will recieve all and passing in an id will fetch a single document.
    Parameters can be any of the fields that exist in a assignmentResult
    """
    assignmentResult(input: AssignmentResFields!): [AssignmentResult!]

	"""
	Get a list of SectionEnrollments given a set of parameters, passing an empty object in will recieve all and passing in an id will fetch a single document.
	Parameters can be any of the fields that exist in a SectionEnrollment
	"""
	sectionEnrollment(input: ModEnrollmentFields!): [SectionEnrollment!]
	"""
	Get a list of modules given the plan ID and enrollment ID
	"""
	modulesBySectionEnrollment(planID: ID!, SectionID: ID!) : [Module!]
	"""
	Retrieve a specific collection based on document ID
	"""
	collection(input: CollectionFields): [Collection]
	"""
	Retrieve modules given a set of parameters
	"""
	module(input: ModuleFields): [Module!]

    """
    Retrieve Content Given a set of parameters
    """
    content(input: ContentFields): [Content!]
    """
    Retrieve a sepcific learning path based on the user's plan of study ID
    """
    learningPath(planID: ID!, pathID: ID): [LearningPath!]!
}

type SimpleLearningPath {
    id:        ID!
    createdAt: Date!
    plan:      PlanOfStudy!
    planID:    ID!
    paths:     [SimplePath!]!
}

type SimplePath {
    id:        ID!
    createdAt: Date!
    updatedAt: Date!
    course:    SimpleCoursePath!
    status:    PathStatus!
    hoursSatisfies: Float!
    learningOutcomes: [String!]!
}

type SimpleCoursePath {
    id: ID!
    sections: [SimpleSection!]!
}

type SimpleSection {
    id: ID!
    name: String!
    collections: [SimpleCollection!]!
}

type SimpleCollection {
    id: ID!
    name: String!
    modules: [SimpleModule!]!
}

type SimpleModule {
    id: ID!
    name: String!
    collections: [SimpleCollection!]!
}

type LearningPath {
    id:        ID!
    createdAt: Date!
    plan:      PlanOfStudy!
    planID:    ID!
    paths:     [Path!]!
}

type Path {
    id:        ID!
    createdAt: Date!
    updatedAt: Date!
    course:    CoursePath!
    status:    PathStatus!
    hoursSatisfies: Float!
    learningOutcomes: [String!]!
}

enum PathStatus {
    DRAFT
    LIVE
}

type CoursePath {
    """
    course id
    """
    id:       ID!
    """
    Name of the course
    """
    name: String!
    """
    modules in the course
    """
    moduleIDs: [ID]
    """
    Boolean value to check if the course is required/core or an elective
    """
    required: Boolean!
    """
    Number of Carnegie Unit and Student Hours that the course is worth
    """
    carnegieHours: Int!
    sections: [SectionPath!]!
}

type SectionPath {
    id:          ID!
    name: String!
    collections: [CollectionPath!]!
}

type CollectionPath {
    id:      ID!
    name: String!
    modules: [ModulePath!]!
}

type ModulePath {
    """
    Module Id
    """
    id: ID!

    """
    Number of the Module
    """
    moduleNumber: Int!

    """
    Name of hte Module
    """
    moduleName: String!

    """
    Description of the Module
    """
    description: String!

    """
    Duration of the Module
    """
    duration: Float!

    """
    Introduction of the Module
    """
    intro: String!

    """
    Keywords in the Modules
    """
    keywords: [String!]!

    """
    objectives in the Modules
    """
    objectives: [String!]!

    """
    Date and Time of the Module Created at
    """
    createdAt: Date!

    """
    Date and Time of the Module Updated at
    """
    updatedAt: Date!

    """
    Memebers enrolled in the Module
    """
    members: [ModuleEnrollment!]!

    """
    Feedback of the Module
    """
    feedback: [ModuleFeedback!]!

    """
    Parent Modules of the Module
    """
    parentModules: [Module!]!

    """
    Child modules in the Module
    """
    subModules: [Module!]!
    """
    courseIDs set
    """
    courseIDs: [ID!]!
    enrollmentID: ID
}

input CreateLearningPathInput {
    path: PathInput
    paths: [PathInput!]
}

input PathInput {
    course: CoursePathInput!
    status: PathStatus
    hoursSatisfies: Float
    learningOutcomes: [String!]
}

input CoursePathInput {
    id: ID!
    sections: [SectionPathInput!]!
}

input SectionPathInput {
    id: ID!
    name: String!
    collections: [CollectionPathInput!]!
}

input CollectionPathInput {
    id: ID!
    name: String!
    modules: [ModulePathInput!]!
}

input ModulePathInput {
    id: ID!
    enrollmentID: ID
}

input CreateContentArgs {
    """
    The type of content that this link/id references
    """
    type: ContentType!

    """
    The URL or other access point for the content being referenced. This will typically be an AWS s3 bucket ID
    """
    link: String!

	"""
	The module that this content belongs to.
	"""
	parent: ID!

	 """
	Boolean property that marks each element in the content array of a module as either the primary content type or secondary resources
	"""
	primary: Boolean!
}

input ContentFields {
    """
    Document ID for this content
    """
    id: ID

    """
    The type of content that this link/id references
    """
    type: ContentType

    """
    The URL or other access point for the content being referenced. This will typically be an AWS s3 bucket ID
    """
    link: String

	"""
	The module that this content belongs to.
	"""
	parent: ID
	 """
	Boolean property that marks each element in the content array of a module as either the primary content type or secondary resources
	"""
	primary: Boolean
}

input CreateCollectionArgs {
	name: String!
	sectionID: ID!
	modules: [ID!]
	positionIndex: Int!
}

input CollectionFields {
	id: ID
	name: String
	sectionID: ID
	modules: [ID]
	positionIndex: Int
}

input SectionFields {
	id: ID
	sectionNumber: Int
	sectionName: String
	description: String
	duration: Float
	intro: String
	numSlides: Int
	keywords: [String!]
	createdAt: Date
	updatedAt: Date
	objectives: [String!]
	assignments: ID
	members: [ID!]
	feedback: ID
	parentSections: [ID!]
	subSections: [ID!]
}

input CourseFields {
	id: ID
	name: String
	section: ID
	required: Boolean
	carnegieHours: Int
}

input AssignmentFields {
    id: ID
    updatedAt: Date
    name: String
    dueAt: Date
    contentURL: String
    contentType: String
    acceptedTypes: FileType

	section: ID
	assignmentResult: ID
}

input ModFeedbackFields {
    id: ID
    feedback: String
    rating: Int

	student: ID
	section: ID
}

input AssignmentResFields {
    id: ID
    submittedAt: Date
    result: Float
    feedback: String
    submissionURL: String
    fileType: String

    student: ID
    gradedBy: ID
    assignment: ID
}

input ModEnrollmentFields {
    id: ID
    enrolledAt: Date

	role: UserRole
	section: ID
	plan: ID
}

input NewSection {
	"""
	Number of the Section
	"""
	sectionNumber: Int!
	"""
	Name of the Section
	"""
	sectionName: String!
	"""
	description of the section
	"""
	description: String!
	"""
	Duration of the NewSection
	"""
	duration: Float!
	"""
	Introduction of the NewSection
	"""
	intro: String!
	"""
	Number of Slides in NewSection
	"""
	numSlides: Int!
	"""
	keywords of the NewSection
	"""
	keywords: [String!]!
}

input UpdateSection {
	"""
	UpdateSection id
	"""
	id: ID!
	"""
	Section Name of the UpdateSection
	"""
	sectionName: String
	"""
	Section NUmber of the UpdateSection
	"""
	sectionNumber: Int
	"""
	Introduction of the UpdateSection
	"""
	intro: String
	"""
	Decription of the UpdateSection
	"""
	description: String
	"""
	Duration of the UpdateSection
	"""
	duration: Float
	"""
	Number of slides in UpdateSection
	"""
	numSlides: Int
	"""
	Keywords in UpdateSection
	"""
	keywords: [String!]
	"""
	The objective to be added to the Section
	"""
	objectives: [String!]
}

input NewAssignment {
	"""
	Name of the NewAssignement
	"""
	name: String!
	"""
	Due date and Time of NewAssignment
	"""
	dueAt: Date!
	"""
	Section to which the NewAssignement Belongs to
	"""
	section: ID!
	"""
	File type that the assignment is submitted in
	"""
	contentType: String!
	"""
	s3 id of the content
	"""
	contentURL: String!
	"""
	Accepted file types for assignments
	"""
	acceptedTypes: FileType!
}

input AssignmentInput {
	"""
	New Name of the Assignment
	"""
	name: String
	"""
	New Due date and time of the Assignement
	"""
	dueAt: Date
	"""
	Updated section linkage
	"""
	section: ID
}

input CourseInput {
	"""
	The name of the given Course
	"""
	name: String!
	"""
	Additional section to be related to the course
	"""
	section: ID!
	"""
	The boolean attribute to decide weather the course is part of core courses or electives
	"""
	required: Boolean!
	"""
	The Carnegie Hours of the Course
	"""
	carnegieHours: Int!
}

input SectionFeedbackInput {
	"""
	New Feedback of the Section
	"""
	feedback: String!
	"""
	New Rating of the Section
	"""
	rating: Int!
}

input SectionFeedbackUpdate {
	"""
	Updated feedback of Section
	"""
	feedback: String
	"""
	Updated feedback of Section
	"""
	rating: Int
}

input NewAssignmentResult {
    """
    Relating assignment result to assignment
    """
    assignment: ID!
    """
    Relating Assignment Result to Student
    """
    student: ID!
    """
    Relating Assignment Result to Grader
    """
    grader: ID!
    """
    result of the NewAssignement
    """
    result: Float!
    """
    s3 id of the submitted file
    """
    submissionURL: String!
    """
    File type that the submission is in
    """
    fileType: String!
}

input SectionEnrollmentInput {
	"""
	Relating Section to SectionEnrollment
	"""
	section: ID!
	"""
	Relating Plan to Section enrollment
	"""
	plan: ID!
	"""
	Relating role to SectionEnrollment
	"""
	role: UserRole!
	"""
	The status of the current enrollment
	"""
	status: EnrollmentStatus!
}

input ModuleInput {
	"""
	Module Name
	"""
	name: String!
	"""
	The link/id of the actual content data itself
	"""
	content: ID
	"""
	The ID of the parent collection
	"""
	collection: ID!

	"""
	The index of the Module in the collection
	"""
	position: Int
	"""
	The list of learning objectives for this Section
	"""
	objectives: [String!]
  """
	The number of carnige hours granted for completing this Section
	"""
	hours: Float!
}

input ModuleFields {
	"""
	document ID
	"""
	id: ID
	"""
	Module Name
	"""
	name: String
	"""
	The link/id of the actual content data itself
	"""
	content: ID
	"""
	The list of ids to threads related to the module (Only a single value is supported)
	"""
	thread: ID
	"""
	The ID of the parent collection
	"""
	collection: ID
	"""
	The index of the module in the collection
	"""
	position: Int
	"""
	Learning objectives that are taught in this Section
	"""
	objectives: [String!]
  """
	The number of carnige hours granted for completing this Section
	"""
	hours:	Float
}

type Mutation {
	"""
	Deletes the entire Section
	"""
	deleteSection(id: ID!): Section
	"""
	Adds an entire Section
	"""
	addSection(input: NewSection): Section!
	"""
	updates a Section
	"""
	updateSection(input: UpdateSection): Section

    """
    deletes all Courses referring id
    """
    deleteCourse(id: ID!): Course
    """
    adds Courses
    """
    addCourse(input: CourseInput): Course!
    """
    Updates Courses
    """
    updateCourse(id: ID!, input: CourseInput): Course

	"""
	adds assignement in Section
	"""
	addAssignment(input: NewAssignment): Assignment!
	"""
	Adds Objectives to a Section while retaining the old ones
	"""
	addObjectives(id: ID!, input: [String!]): Section
	"""
	Deletes assignments in Section
	"""
	deleteAssignment(section: ID!, id: ID!): Section
	"""
	Updates Assignements
	"""
	updateAssignment(id: ID!, input: AssignmentInput): Assignment

	addSectionFeedback(
		"""
		Section Feedback is given relating to Sectionid
		"""
		sectionId: ID!
		"""
		section Feedback is given relating to Userid
		"""
		userId: ID!
		"""
		section Feedback is given relating to Sectionfeedbackinput
		"""
		input: SectionFeedbackInput
	): Section
	"""
	Section feedback is updated
	"""
	updateSectionFeedback(id: ID!, input: SectionFeedbackUpdate): SectionFeedback
	"""
	Section feedback is deleted
	"""
	deleteSectionFeedback(id: ID!): SectionFeedback
	"""
	Assignment Result is added
	"""
	addAssignmentResult(input: NewAssignmentResult): AssignmentResult!
	"""
	Updated the results of an Assignment
	"""
	updateAssignmentResult(id: ID!, result: Float!): AssignmentResult
	"""
	Assignment result is deleted
	"""
	deleteAssignmentResult(id: ID!): AssignmentResult
	"""
	Course Section is paired Relating Course ID and Section Id
	"""
	addSectionEnrollment(input: SectionEnrollmentInput): SectionEnrollment!
	updateSectionEnrollment(
		"""
		Section enrollment is updated relating to id
		"""
		id: ID!
		"""
		Section enrollment input
		"""
		input: SectionEnrollmentInput
	): SectionEnrollment

	"""
	Delete SectionEnrollment
	"""
	deleteSectionEnrollment(id: ID!): SectionEnrollment

	pairCourseSection(courseId: ID!, sectionId: ID!): Section!

	"""
	Course Section is Unpaired Relating to Course Id and mobile Id
	"""
	unpairCourseSection(courseId: ID!, sectionId: ID!): Section

    """
    Create a new collection
    """
    createCollection(data: CreateCollectionArgs!): Collection!

    """
    Update a collection given its ID and the new data to update
    """
    updateCollection(id: ID!, data: CollectionFields!): Collection!

	"""
	Create a Module for an individual collection
	"""
	createModule(input: ModuleInput!): Module!
	"""
	Update a module given its ID
	The input parameter is the data that will be updated in the module as well as the ID of the module to be updated.
	The replaceObj parameter specifies the mode in which module objectives should be updated. A true value will repalce
	existing objectives with the new list passed in, whereas a false value (default) will add the strings in the list to
	the existing data.
	"""
	updateModule(input: ModuleFields, replaceObj: Boolean): Module

	deleteModule(id: String!): Module

    """
    Create a Content Record
    """
    createContent(input: CreateContentArgs!): Content!

    """
    Update a content Record
    """
    updateContent(input: ContentFields!): [Content!]

    """
    Delete an existing content record
    """
    deleteContent(contentID: ID!): Content
    """
    Create a new learning path model with the given program structure
    """
    createLearningPath(planID: ID!, input: CreateLearningPathInput!): LearningPath!
    """
    Update an existing learning path with the given program structure
    """
    updateLearningPath(planID: ID!, pathID: ID!, input: PathInput!): LearningPath!
    """
    Delete an existing learning path
    """
    deleteLearningPath(planID: ID!, pathID: ID!): LearningPath!
}
