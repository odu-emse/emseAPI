enum UserRole {
	STUDENT
	TEACHER
	GRADER
}

type ModuleEnrollment {
	"""
	id of the ModuleEnrollment
	"""
	id: ID!

	"""
	TimeStamp at which the module is enrolledAt
	"""
	enrolledAt: String!

	"""
	Role of the user:Either Student, Teacher or Grader
	"""
	role: UserRole!

	"""
	Current Module
	"""
	module: Module!

	"""
	Plan of study Chosen
	"""
	plan: PlanOfStudy!
}

type AssignmentResult {
	"""
	id of AssignmentResult
	"""
	id: ID!

	"""
	Time at which the Assignement Result is given
	"""
	submittedAt: String!

	"""
	result of the Assignement
	"""
	result: Float!

	"""
	feedback given on the Assignment
	"""
	feedback: String

	"""
	Assignement Result of the student
	"""
	student: PlanOfStudy

	"""
	Assignement graded by the User
	"""
	gradedBy: User

	"""
	Assignement to which result is given
	"""
	assignment: Assignment
}

type Assignment {
	"""
	Assignment id
	"""
	id: ID!

	"""
	date and time at which assignment is updated
	"""
	updatedAt: String!

	"""
	Name of the assignment
	"""
	name: String!

	"""
	due of the assignment
	"""
	dueAt: String

	"""
	Assignment belonging to the module
	"""
	module: Module!

	"""
	Assignment Result
	"""
	assignmentResults: [AssignmentResult]
}

type ModuleFeedback {
	"""
	id of ModuleFeedback
	"""
	id: ID!

	"""
	Feedback fo the Module
	"""
	feedback: String!

	"""
	Rating given in the feedback
	"""
	rating: Int!

	"""
	Module feedback given by the student
	"""
	student: User

	"""
	Module in which module feedback is given
	"""
	module: Module

}

type Course {
	"""course id"""
	id: ID!

	"""Name of the course"""
	name: String!

	"""modules in the course"""
	modules: [ModuleInCourse]
}

type Module {
	"""
	Module Id
	"""
	id: ID!

	"""
	Number of the Module
	"""
	moduleNumber: Int!

	"""
	Name of hte Module
	"""
	moduleName: String!

	"""
	Description of the Module
	"""
	description: String!

	"""
	Duration of the Module
	"""
	duration: Float!

	"""
	Introduction of the Module
	"""
	intro: String!

	"""
	No of slides in the Module
	"""
	numSlides: Int!

	"""
	Keywords in the Modules
	"""
	keywords: [String!]!

	"""
	Date and Time of the Module Created at
	"""
	createdAt: String!

	"""
	Date and Time of the Module Updated at
	"""
	updatedAt: String!

	"""
	Assignement in the module
	"""
	assignments: [Assignment]

	"""
	Memebers enrolled in the Module
	"""
	members: [ModuleEnrollment]

	"""
	Feedback of the Module
	"""
	feedback: [ModuleFeedback]

	"""
	Parent Courses in the Modules
	"""
	parentCourses: [ModuleInCourse]

	"""
	Parent Modules of the Module
	"""
	parentModules: [Requirement]

	"""
	Childmodules in the Module
	"""
	childModules: [Requirement]
}
type Requirement{
	"""
	id of Requirement
	"""
	id: ID!

	"""
	Child module in requirement
	"""
	child: Module!

	"""
	Parent Module in Requirement
	"""
	parent: Module!
}

type ModuleInCourse {
	"""
	id of ModuleInCourse
	"""
	id: ID!

	"""
	Module in ModuleInCourse
	"""
	module: Module

	"""
	Course in ModuleInCourse
	"""
	course: Course
}

type Error {
	"""
	Error message
	"""
	message: String
}

type Query {
	"""
	List of All modules in the Query
	"""
	modules: [Module!]!
	"""
	Specific Module in the Modules
	"""
	module(id: ID!): Module

	"""
	Specific Course in the Courses
	"""
	course(id: ID!): Course
	"""
	List of all courses
	"""
	courses: [Course!]!

	"""
	Specific assignment in assignments
	"""
	assignments: [Assignment!]!
	"""
	List of all assignments
	"""
	assignment(id: ID!): Assignment

	""""
	Modules in the courses
	"""
	moduleInCourses: [ModuleInCourse!]!

	"""
	Module feedbacks
	"""
	moduleFeedbacks: [ModuleFeedback!]!
	"""
	Specific module feedback in modulefeedbacks
	"""
	moduleFeedback(id: ID!): ModuleFeedback

	"""
	Specific assisgnement result
	"""
	assignmentResults: [AssignmentResult!]!
	"""
	list of all assignment Results
	"""
	assignmentResult(id: ID!): AssignmentResult

	"""
	List of module enrollment
	"""
	moduleEnrollments: [ModuleEnrollment!]!
	"""
	Specific Moduleenrollment in Moduleenrollment
	"""
	moduleEnrollment(id: ID!): ModuleEnrollment
}


input NewModule {
	moduleNumber: Int!
	moduleName: String!
	description: String!
	duration: Float!
	intro: String!
	numSlides: Int!
	keywords: [String!]!
}

input UpdateModule {
	id: ID!
	moduleName: String
	moduleNumber: Int
	intro: String
	description: String
	duration: Float
	numSlides: Int

	keywords: [String!]
}

input NewAssignment {
	name: String!
	dueAt: String!
	module: ID!
}

input AssignmentInput {
	name: String
	dueAt: String
	module: ID
}

input CourseInput {
	name: String!
}

input ModuleFeedbackInput {
	feedback: String!
	rating: Int!
}

input ModuleFeedbackUpdate {
	feedback: String
	rating: Int
}

input NewAssignmentResult {
	assignment: ID!
	student: ID!
	grader: ID!

	result: Float!
}

input ModuleEnrollmentInput {
	module: ID!
	plan: ID!
	role: UserRole!
}

type Mutation {
	deleteModule(id: ID!): Module
	addModule(input: NewModule): Module!
	updateModule(input: UpdateModule): Module

	addRequirement(parentId: String, childId: String): Requirement
	removeRequirement(parentId: String, childId: String): Requirement

	deleteCourse(id: ID!): Course
	addCourse(input: CourseInput): Course!
	updateCourse(id: ID!, input: CourseInput): Course

	addAssignment(input: NewAssignment): Assignment!
	deleteAssignment(module: ID!, id: ID!): Module
	updateAssignment(id: ID!, input: AssignmentInput): Assignment

	addModuleFeedback(
		moduleId: ID!
		userId: ID!
		input: ModuleFeedbackInput
	): Module
	updateModuleFeedback(id: ID!, input: ModuleFeedbackUpdate): ModuleFeedback
	deleteModuleFeedback(id: ID!): ModuleFeedback

	addAssignmentResult(input: NewAssignmentResult): AssignmentResult!
	updateAssignmentResult(id: ID!, result: Float!): AssignmentResult
	deleteAssignmentResult(id: ID!): AssignmentResult

	addModuleEnrollment(input: ModuleEnrollmentInput): ModuleEnrollment!
	updateModuleEnrollment(
		id: ID!
		input: ModuleEnrollmentInput
	): ModuleEnrollment
	deleteModuleEnrollment(id: ID!): ModuleEnrollment
	
	pairCourseModule(courseId: ID!, moduleId: ID!): ModuleInCourse!
	unpairCourseModule(courseId: ID!, moduleId: ID!): ModuleInCourse
}
