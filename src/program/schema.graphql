enum UserRole {
	STUDENT
	TEACHER
	GRADER
}

enum EnrollmentStatus {
    ACTIVE
    INACTIVE
}

type ModuleEnrollment {
    """
    id of the ModuleEnrollment
    """
    id: ID!

    """
    TimeStamp at which the module is enrolledAt
    """
    enrolledAt: Date!

    """
    Role of the user:Either Student, Teacher or Grader
    """
    role: UserRole!

    """
    Status of the enrollment: Either Active or Inactive
    """
    status: EnrollmentStatus!

    """
    Current Module
    """
    module: Module!

    """
    Plan of study Chosen
    """
    plan: PlanOfStudy

    """
    Inactive plan of study
    """
    inactivePlan: PlanOfStudy

}

type AssignmentResult {
	"""
	id of AssignmentResult
	"""
	id: ID!

	"""
	Time at which the Assignement Result is given
	"""
	submittedAt: Date!

	"""
	result of the Assignement
	"""
	result: Float!

	"""
	feedback given on the Assignment
	"""
	feedback: String

	"""
	Assignement Result of the student
	"""
	student: PlanOfStudy

	"""
	Assignement graded by the User
	"""
	gradedBy: User

	"""
	Assignement to which result is given
	"""
	assignment: Assignment
}

type Assignment {
	"""
	Assignment id
	"""
	id: ID!

	"""
	date and time at which assignment is updated
	"""
	updatedAt: Date!

	"""
	Name of the assignment
	"""
	name: String!

	"""
	due of the assignment
	"""
	dueAt: Date

	"""
	Assignment belonging to the module
	"""
	module: Module!

	"""
	Assignment Result
	"""
	assignmentResults: [AssignmentResult]
}

type ModuleFeedback {
	"""
	id of ModuleFeedback
	"""
	id: ID!

	"""
	Feedback fo the Module
	"""
	feedback: String!

	"""
	Rating given in the feedback
	"""
	rating: Int!

	"""
	Module feedback given by the student
	"""
	student: User

	"""
	Module in which module feedback is given
	"""
	module: Module
}

type Course {
	"""
	course id
	"""
	id: ID!

	"""
	Name of the course
	"""
	name: String!

	"""
	modules in the course
	"""
	moduleIDs: [ID]
}

type Module {
	"""
	Module Id
	"""
	id: ID!

	"""
	Number of the Module
	"""
	moduleNumber: Int!

	"""
	Name of hte Module
	"""
	moduleName: String!

	"""
	Description of the Module
	"""
	description: String!

	"""
	Duration of the Module
	"""
	duration: Float!

	"""
	Introduction of the Module
	"""
	intro: String!

	"""
	No of slides in the Module
	"""
	numSlides: Int!

	"""
	Keywords in the Modules
	"""
	keywords: [String!]!

	"""
	Date and Time of the Module Created at
	"""
	createdAt: Date!

	"""
	Date and Time of the Module Updated at
	"""
	updatedAt: Date!

	"""
	Assignement in the module
	"""
	assignments: [Assignment]

	"""
	Memebers enrolled in the Module
	"""
	members: [ModuleEnrollment]

	"""
	Feedback of the Module
	"""
	feedback: [ModuleFeedback]


	"""
	Parent Modules of the Module
	"""
	parentModules: [Module]

	"""
	Child modules in the Module
	"""
	subModules: [Module]
	"""
	A list of collections that have this module's materials
	"""
	collections: [Collection]

	"""
	courseIDs set
	"""
	courseIDs: [ID]
}

type Collection {
	"""
	id of the collection
	"""
	id: ID!

	"""
	Name of the collection
	"""
	name: String!

	"""
	Date and Time of the collection created at
	"""
	createdAt: Date!

	"""
	Date and Time of the collection updated at
	"""
	updatedAt: Date!

	"""
	List of lessons in the collection
	"""
	lessons: [Lesson]

	"""
	The ID of the next collection
	"""
	next: ID

	"""
	The ID of the previous collection
	"""
	previous: ID

	"""
	The ID of the first lesson in the collection
	"""
	first: ID

	"""
	The ID of the last lesson in the collection
	"""
	last: ID
	"""
	The module that this collection belongs to
	"""
	module: Module!
	"""
	The module's unique ID that this collection belongs to
	"""
	moduleID: ID!
}

type Lesson {
	"""
	document ID
	"""
	id: ID!
	"""
	Lesson Name
	"""
	name: String!
	"""
	The type of content being displayed. (PDF, Video, etc.)
	"""
	contentType: String!
	"""
	The link/id of the actual content data itself
	"""
	content: String!
	"""
	An optional transcript of the content data (primarily for videos)
	"""
	transcript: 	String
    """
    The list of threads related to the lesson
    """
    threads: [ID]
    """
    The collection that the lesson belongs to
    """
    collection: Collection
	"""
	The ID of the next lesson
	"""
	next: ID

	"""
	The ID of the previous lesson
	"""
	previous: ID
}

type Error {
	"""
	Error message
	"""
	message: String
}

type Query {
	"""
	List of All modules in the Query
	"""
	modules: [Module!]!
	"""
	Specific Module in the Modules
	"""
	module(id: ID!): Module
	modulesByParam(input: ModuleFields!): [Module!]

	"""
	Specific Course in the Courses
	"""
	course(id: ID!): Course
	"""
	List of all courses
	"""
	courses: [Course!]!
	courseByParam(input: CourseFields!): [Course!]

	"""
	Specific assignment in assignments
	"""
	assignments: [Assignment!]!
	"""
	List of all assignments
	"""
	assignment(id: ID!): Assignment
	assignmentByParam(input: AssignmentFields!): [Assignment!]

	"""
	Module feedbacks
	"""
	moduleFeedbacks: [ModuleFeedback!]!
	"""
	Specific module feedback in module feedbacks
	"""
	moduleFeedback(id: ID!): ModuleFeedback
	modFeedbackByParam(input: ModFeedbackFields!): [ModuleFeedback!]

	"""
	Specific assignment result
	"""
	assignmentResults: [AssignmentResult!]!
	"""
	list of all assignment Results
	"""
	assignmentResult(id: ID!): AssignmentResult
	assignmentResultByParam(input: AssignmentResFields!): [AssignmentResult!]

	"""
	List of module enrollment
	"""
	moduleEnrollments: [ModuleEnrollment!]!
	"""
	Retrieve a specific Module enrollment based on document ID
	"""
	moduleEnrollment(id: ID!): ModuleEnrollment

	modEnrollmentByParam(input: ModEnrollmentFields!): [ModuleEnrollment!]

	"""
	List of all collections
	"""
	collections: [Collection!]!
    """
    Retrieve a specific collection based on document ID
    """
    collection(id: ID!): Collection

    """
    Retrieve lessons given a set of parameters
    """
    lessons(input: LessonFields): [Lesson!]
   
}

input CreateCollectionArgs {
	name: String!
	first: ID
	last: ID
	previous: ID
	next: ID
	moduleID: ID!
	lessons: [ID!]
	positionIndex: Int
}

input ModuleFields {
	id: ID
	moduleNumber: Int
	moduleName: String
	description: String
	duration: Float
	intro: String
	numSlides: Int
	keywords: [String!]
	createdAt: Date
	updatedAt: Date

	assignments: ID
	members: [ID!]
	feedback: ID
	parentModules: [ID!]
	subModules: [ID!]
}

input CourseFields {
	id: ID
	name: String

	module: ID
}

input AssignmentFields {
	id: ID
	updatedAt: Date
	name: String
	dueAt: Date

	module: ID
	assignmentResult: ID
}

input ModFeedbackFields {
	id: ID
	feedback: String
	rating: Int

	student: ID
	module: ID
}

input AssignmentResFields {
	id: ID
	submittedAt: Date
	result: Float
	feedback: String

	student: ID
	gradedBy: ID
	assignment: ID
}

input ModEnrollmentFields {
	id: ID
	enrolledAt: Date

	role: UserRole
	module: ID
	plan: ID
}

input NewModule {
	"""
	Number of the Module
	"""
	moduleNumber: Int!
	"""
	Name of the Module
	"""
	moduleName: String!
	"""
	description of the Module
	"""
	description: String!
	"""
	Duration of the NewModule
	"""
	duration: Float!
	"""
	Introduction of the NewModule
	"""
	intro: String!
	"""
	Number of Slides in NewModule
	"""
	numSlides: Int!
	"""
	keywords of the NewModule
	"""
	keywords: [String!]!
}

input UpdateModule {
	"""
	UpdateModule id
	"""
	id: ID!
	"""
	Module Name of the UpdateModule
	"""
	moduleName: String
	"""
	Module NUmber of the UpdateModule
	"""
	moduleNumber: Int
	"""
	Introduction of the UpdateModule
	"""
	intro: String
	"""
	Decription of the UpdateModule
	"""
	description: String
	"""
	Duration of the UpdateModule
	"""
	duration: Float
	"""
	Number of slides in Updatemodule
	"""
	numSlides: Int
	"""
	Keywords in UpdateModule
	"""
	keywords: [String!]
}

input NewAssignment {
	"""
	Name of the NewAssignement
	"""
	name: String!
	"""
	Due date and Time of NewAssignment
	"""
	dueAt: Date!
	"""
	Module to which the NewAssignement Belongs to
	"""
	module: ID!
}

input AssignmentInput {
	"""
	New Name of the Assignment
	"""
	name: String
	"""
	New Due date and time of the Assignement
	"""
	dueAt: Date
	"""
	Updated module linkage
	"""
	module: ID
}

input CourseInput {
	"""
	New Name of the Course
	"""
	name: String!
}

input ModuleFeedbackInput {
	"""
	New Feedback of the Module
	"""
	feedback: String!
	"""
	New Rating of the Module
	"""
	rating: Int!
}

input ModuleFeedbackUpdate {
	"""
	Updated feedback of Module
	"""
	feedback: String
	"""
	Updated feedback of Module
	"""
	rating: Int
}

input NewAssignmentResult {
	"""
	Relating assignment result to assignment
	"""
	assignment: ID!
	"""
	Relating Assignment Result to Student
	"""
	student: ID!
	"""
	Relating Assignment Result to Grader
	"""
	grader: ID!

	"""
	result of the NewAssignement
	"""
	result: Float!
}

input ModuleEnrollmentInput {
    """
    Relating Module to ModuleEnrollment
    """
    module: ID!
    """
    Relating Plan to Module enrollment
    """
    plan: ID!
    """
    Relating role to ModuleEnrollment
    """
    role: UserRole!
    """
    The status of the current enrollment
    """
    status: EnrollmentStatus!
}

input LessonInput {
	"""
	Lesson Name
	"""
	name: 			String!
	"""
	The type of content being displayed. (PDF, Video, etc.)
	"""
	contentType: 	String!
	"""
	The link/id of the actual content data itself
	"""
	content: 		String!
	"""
	An optional transcript of the content data (primarily for videos)
	"""
	transcript: 	String
    """
    The ID of the parent collection
    """
    collection: ID!
	"""
	The ID of the next lesson in the collection
	"""
	next: 			ID
	"""
	The ID of the previous lesson in the collection
	"""
	previous: 		ID
}

input LessonFields {
    """
	document ID
	"""
	id: 			ID
	"""
	Lesson Name
	"""
	name: 			String
	"""
	The type of content being displayed. (PDF, Video, etc.)
	"""
	contentType: 	String
	"""
	The link/id of the actual content data itself
	"""
	content: 		String
	"""
	An optional transcript of the content data (primarily for videos)
	"""
	transcript: 	String
    """
    The list of ids to threads related to the lesson (Only a single value is supported)
    """
    thread: ID
    """
    The ID of the parent collection
    """
    collection: ID
}

type Mutation {
	"""
	Deletes the entire Module
	"""
	deleteModule(id: ID!): Module
	"""
	Adds an entire module
	"""
	addModule(input: NewModule): Module!
	"""
	updates a Module
	"""
	updateModule(input: UpdateModule): Module

	"""
	deletes all Courses referring id
	"""
	deleteCourse(id: ID!): Course
	"""
	adds Courses
	"""
	addCourse(input: CourseInput): Course!
	"""
	Updates Courses
	"""
	updateCourse(id: ID!, input: CourseInput): Course

	"""
	adds assignement in module
	"""
	addAssignment(input: NewAssignment): Assignment!
	"""
	Deletes assignments in Module
	"""
	deleteAssignment(module: ID!, id: ID!): Module
	"""
	Updates Assignements
	"""
	updateAssignment(id: ID!, input: AssignmentInput): Assignment

	addModuleFeedback(
		"""
		Module Feedback is given relating to Moduleid
		"""
		moduleId: ID!
		"""
		Module Feedback is given relating to Userid
		"""
		userId: ID!
		"""
		Module Feedback is given relating to Modulefeedbackinput
		"""
		input: ModuleFeedbackInput
	): Module
	"""
	Module feedback is updated
	"""
	updateModuleFeedback(id: ID!, input: ModuleFeedbackUpdate): ModuleFeedback
	"""
	Module feedback is deleted
	"""
	deleteModuleFeedback(id: ID!): ModuleFeedback
	"""
	Assignment Result is added
	"""
	addAssignmentResult(input: NewAssignmentResult): AssignmentResult!
	"""
	Assignment Reuslt is Updated
	"""
	updateAssignmentResult(id: ID!, result: Float!): AssignmentResult
	"""
	Assignment result is deleted
	"""
	deleteAssignmentResult(id: ID!): AssignmentResult
    """
    Course Module is paired Relating Course ID and module Id
    """

	addModuleEnrollment(input: ModuleEnrollmentInput): ModuleEnrollment!
	updateModuleEnrollment(
		"""
		Module enrollment is updated relating to id
		"""
		id: ID!
		"""
		Module enrollment input
		"""
		input: ModuleEnrollmentInput
	): ModuleEnrollment
	
	"""
	Delete ModuleEnrollment
	"""
	deleteModuleEnrollment(id: ID!): ModuleEnrollment

    pairCourseModule(courseId: ID!, moduleId: ID!): Module!
    """
    Course Module is Unpaired Relating to Course Id and mobile Id
    """
    unpairCourseModule(courseId: ID!, moduleId: ID!): Module
    """
    """
    createCollection(data: CreateCollectionArgs!): Collection!

    """
    Create a Lesson for an individual collection
    """
    createLesson(input: LessonInput!): Lesson!
    """
    Update a lesson given its ID
    """
    updateLesson(input: LessonFields): Lesson

    deleteLesson(id: String!): Lesson
}
