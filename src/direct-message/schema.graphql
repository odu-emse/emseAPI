type Subscription {
    """
    Subscribe to new messages in a group. If the receiverID is not matched by the receiverID of the message, the message is not caught by WS.
    """
    newDirectMessage(receiverID: ID): DirectMessageResponse!
    newGroupMessage(groupID: ID): DirectMessageResponse!
}
type Query {
    """
    Get all messages in a group.
    """
    directMessages(receiverID: ID!, senderID: ID!): [DirectMessageResponse!]!
    """
    Get all groups for a user.
    """
    groups(userID: ID!): [Group!]!
    """
    Get all messages in a group. If the receiverID is not matched by the receiverID of the message, the message is not returned.
    """
    groupMessages(groupID: ID!): [DirectMessageResponse!]!
    """
    Get all messages sent by a user.
    """
    sentMessages(senderID: ID!): [DirectMessageResponse!]!
}
type Mutation {
    """
    Send a message to a user. If the receiverID is and the senderID match, the service fails and returns an Error.
    """
    createDirectMessage(receiverID: ID!, message: String!, senderID: ID!): Boolean!
    """
    Send a message to a group of users.
    """
    newGroupMessage(groupID: ID!, message: String!, senderID: ID!): Boolean!
#    createChannel(groupID: ID!, name: String!, publicAccess: Boolean=false): Boolean!

    createGroup(name: String!, members: [ID!]!, publicGroup: Boolean=false): Group!
}

type CreateMessageInput {
    authorID: ID!
    recipientID: ID!
    message: String!
}

type DirectMessageResponse {
    id: ID!
    createdAt: Date!
    updatedAt: Date!
    body: String!
    authorID: ID!
    recipientID: ID!
    author: User!
    recipient: Members!
}

union Members = User | Group

type Group {
    id: ID!
    name: String!
    members: [User!]!
    public: Boolean!
    messages: [DirectMessageResponse!]!
}