    """
    A thread is a collection of messages posted to a particular topic.
    """
type Thread {
    """
    The ID of the document object
    """
    id: ID!
    """
    The title of the thread
    """
    title: String
    """
    The author of the thread
    """
    author: User!
    """
    The content body of the thread
    """
    body: String!
    """
    The comments added to the thread
    """
    comments: [Thread]
    """
    The number of upvotes for the thread
    """
    upvotes: Int!
    """
    The list of users who are subscribed to changes/notifications on the thread
    """
    usersWatching: [User!]
    """
    TODO: Add linkage between lesson and thread once lesson schema is defined
    """
    parentLesson: Lesson
    """
    """
    createdAt: Date!
    """
    """
    updatedAt: Date!
    """
    """
    parentThread: Thread
    parentThreadID: ID
}

input IThreadCreateInput {
    title: String
    body: String!
    parentLesson: ID
    parentThread: ID
    author: ID!
}

input ICommentCreateInput {
    body: String!
    author: ID!
}

input IThreadByParams {
    """
    The ID of the thread to be exactly equal to the given value. If this parameter is given, all other parameters are ignored. The returned thread is guaranteed to be unique, but still returned as an array.
    """
    id: ID
    """
    The title of the thread to be partially matched to the given value. Upper and lower case characters are not treated equally.
    """
    title: String
    """
    The content body of the thread to be partially matched to the given value. Upper and lower case characters are not treated equally.
    """
    body: String
    """
    The ID of the lesson to be exactly equal to the given value.
    """
    parentLesson: ID
    """
    The ID of the parent thread to be exactly equal to the given value.
    """
    parentThread: ID
    """
    The ID of a comment to be exactly equal to the given value. The query will look through all Threads that are comments and return the parent thread and the entire comments array that matches the given ID.
    """
    comments: ID
    """
    The number of upvotes for the thread to be exactly equal to the given value. If this parameter is given, upvotesGTE and upvotesLTE are ignored. If this parameter has a value of 0, the parameter is ignored.
    """
    upvotes: Int
    """
    The number of upvotes for the thread to be greater than or equal to the given value. If this parameter is given, upvotes is ignored. This parameter can be used in conjunction with upvotesLTE to create a range based search.
    """
    upvotesGTE: Int
    """
    The number of upvotes for the thread to be less than or equal to the given value. If this parameter is given, upvotes is ignored. This parameter can be used in conjunction with upvotesGTE to create a range based search.
    """
    upvotesLTE: Int
    """
    The ID of the user to be exactly equal to the given value.
    """
    author: ID
}

type Query {
    """
    Get a list of threads that match the given parameters. If no parameters are given, all threads are returned. If the id parameter is given, the returned thread is guaranteed to be unique.
    """
    thread(input: IThreadByParams): [Thread!]!
}

type Mutation {
    """
    Creates a new thread
    @args IThreadCreateInput
    @prop title: String
    @prop body: String!
    @prop parentLesson: ID
    @prop parentThread: ID
    """
    createThread(data:IThreadCreateInput!): Thread

    addCommentToThread(id: ID!, data: ICommentCreateInput!): Thread

    upvoteThread(id: ID!): Thread

    updateThread(id: ID!, data: IThreadCreateInput!): Thread

    deleteThread(id: ID!): Thread
}