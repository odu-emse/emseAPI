type Quiz {
	"""
	The document ID For this quiz
	"""
	id: ID!
	"""
	The total amount of points possible on the quiz
	"""
	totalPoints: Float!
	"""
	The instruction field for this quiz
	"""
	instructions: String
	"""
	The time the Quiz is due
	"""
	dueAt: Date
	"""
	The allotted time to take this quiz in ms
	"""
	timeLimit: Int
	"""
	The number of questions on this quiz
	"""
	numQuestions: Int!
	"""
	The minimum passing score for this quiz
	"""
	minScore: Float!
	"""
	The module that this quiz belongs to
	"""
	parentModule: Module!
	"""
	The possible questions and variants of for this quiz
	"""
	questionPool: [Question!]!
	"""
	The list of actual quiz instances students are taking
	"""
	instances: [QuizInstance!]!
}

type QuizInstance {
	"""
	The document ID for this QuizInstance
	"""
	id: ID!
	"""
	The quiz template this is an instance of
	"""
	quiz: Quiz!
	"""
	The list of questions in this instance of a quiz. One variant for each question number will be selected
	"""
	questions: [Question!]!
	"""
	The submission for this instance
	"""
	quizResult: QuizResult!
}

type Question {
	"""
	The document ID of the question
	"""
	id: ID!
	"""
	The question number on the quiz/in the pool
	"""
	number: Int!
	"""
	Which variant of the question is this record
	"""
	variant: Int
	"""
	The text of the question (the readable question itself)
	"""
	text: String!
	"""
	The amount of points this question is worth
	"""
	points: Float!
	"""
	The possible answers to this question
	"""
	answers: [Answer!]!
	"""
	The parent Quiz of this question
	"""
	parent: Quiz!
	"""
	The quiz instances that this question/variant is used in
	"""
	instances: [QuizInstance!]!
}

type Answer {
	"""
	The document ID of this answer
	"""
	id: ID!
	"""
	The actual human readable text of this answer
	"""
	text: String!
	"""
	If this possible is marked as a correct response
	"""
	correct: Boolean!
	"""
	The weight towards total points this answer will have default is evenly distributed for each correct answer in a question
	"""
	weight: Float
	"""
	The index of the answer when listed (A, B, C, D, etc.)
	If no value is specified then the order will be random when queried
	"""
	index: String
	"""
	The question that this answer belongs to
	"""
	parentQuestion: Question!
}

type QuizResult {
	"""
	The document ID of the quiz result
	"""
	id: String!
	"""
	The score received on this quiz
	"""
	score: Float!
	"""
	The list of answers provided for questions on this quiz
	"""
	answers: [String!]!
	"""
	The time and date that this result was submitted at.
	"""
	submittedAt: Date
	"""
	The plan of study of the user who took the quiz
	"""
	student: PlanOfStudy!
	"""
	The quiz this result is for. This field relation is immutable to protect the grading algorithm
	"""
	quizInstance: QuizInstance!
}

input QuizFields {
	"""
	The document ID For this quiz
	"""
	id: ID
	"""
	The total amount of points possible on this quiz
	"""
	totalPoints: Float
	"""
	The instruction field for this quiz
	"""
	instructions: String
	"""
	The time the Quiz is due
	"""
	dueAt: Date
	"""
	The allotted time to take this quiz in ms
	"""
	timeLimit: Int
	"""
	The number of questions on this quiz
	"""
	numQuestions: Int
	"""
	The minimum passing score for this quiz
	"""
	minScore: Float
	"""
	The module that this quiz belongs to
	"""
	parentModule: ID
}

input QuizInstanceFields {
	"""
	The document id of a quiz instance
	"""
	id: ID
	"""
	The quiz that an instance is derived from
	"""
	quiz: ID
}

input QuestionFields {
	"""
	The document ID of the question
	"""
	id: ID
	"""
	The question number on the quiz/in the pool
	"""
	number: Int
	"""
	The variant (unique to question number) of a question
	"""
	variant: Int
	"""
	The text of a question (the readable question itself)
	"""
	text: String
	"""
	The amount of points a question is worth
	"""
	points: Float
	"""
	The Quiz that a question belongs to
	"""
	parent: ID
}

input AnswerFields {
	"""
	The document ID of this answer
	"""
	id: ID
	"""
	The actual human readable text of this answer
	"""
	text: String
	"""
	If this possible is marked as a correct response
	"""
	correct: Boolean
	"""
	The weight towards total points this answer will have default is evenly distributed for each correct answer in a question
	"""
	weight: Float
	"""
	The index of the answer when listed (A, B, C, D, etc.)
	"""
	index: String
	"""
	The question that this answer belongs to
	"""
	parentQuestion: ID
}

input QuizResultFields {
	"""
	The document ID of the quiz result
	"""
	id: String
	"""
	The score received on this quiz
	"""
	score: Float
	"""
	The plan of study of the user who took the quiz
	"""
	student: ID
	"""
	The quiz instance that this is a submission for.
	"""
	quizInstance: ID
}

type Query {
	"""
	Fetch a Quiz by any of its parameters. an empty object will return all quizzes and a single id will return a single quiz
	"""
	quiz(args: QuizFields!): [Quiz!]!
	"""
	Fetch a single or multiple instances of a quiz by any of its paramters. An empty object will return all instances.
	Giving only this parent quiz id will give all instances of a particular quiz.
	"""
	quizInstance(args: QuizInstanceFields!): [QuizInstance!]!
	"""
	Fetch a Question by any of its parameters. An empty object as the input parameter will return all Questions, an ID will retrieve an array with just a single Question.
	If a only a pool ID is provided than all questions in that pool will be returned.
	If a combination of parameters are used then only documents that match all the parameters will be included in the array.
	"""
	question(args: QuestionFields!): [Question!]!
	"""
	Fetch an Answer by any of its parameters. An empty object as the input parameter will return all Answers, an ID will retrieve an array with just a single Answer.
	If a only a Question ID is provided than all answers for that question will be returned.
	If a combination of parameters are used then only documents that match all the parameters will be included in the array.
	"""
	answer(args: AnswerFields!): [Answer!]!
	"""
	Fetch a quiz result by any of its parameters. An empty object as the input parameter will get all records.
	If just a quiz ID is provided than all results for that quiz will be shown. If just a planID is given then just that
	users results will be shown.
	If combinations of parameters are used then only records that match all parameters will be returned.
	"""
	quizResult(args: QuizResultFields!): [QuizResult!]!
}

# Mutations and relevant inputs

input CreateQuiz {
	"""
	The total amount of points possible on this quiz
	"""
	totalPoints: Float!
	"""
	The instruction field for this quiz
	"""
	instructions: String
	"""
	The time the Quiz is due
	"""
	dueAt: Date
	"""
	The allotted time to take this quiz in ms
	"""
	timeLimit: Int
	"""
	The number of questions on this quiz
	"""
	numQuestions: Int!
	"""
	The minimum passing score for this quiz
	"""
	minScore: Float
	"""
	The module that this quiz belongs to
	"""
	parentModule: ID!
}

input UpdateQuiz {
	"""
	The total amount of points possible on this quiz
	"""
	totalPoints: Float
	"""
	The instruction field for this quiz
	"""
	instructions: String
	"""
	The time the Quiz is due
	"""
	dueAt: Date
	"""
	The allotted time to take this quiz in ms
	"""
	timeLimit: Int
	"""
	The number of questions on this quiz
	"""
	numQuestions: Int
	"""
	The minimum passing score for this quiz
	"""
	minScore: Float
	"""
	The module that this quiz belongs to
	"""
	parentModule: ID
}

input CreateQuestion {
	"""
	The question number on the quiz/in the pool
	"""
	number: Int!
	"""
	The variant of the question number that this question is
	"""
	variant: Int!
	"""
	The text of the question (the readable question itself)
	"""
	text: String!
	"""
	The amount of points this question is worth
	"""
	points: Float
	"""
	The quiz this question belongs to
	"""
	parentQuiz: ID!
}

input UpdateQuestion {
	"""
	The question number on the quiz/in the pool
	"""
	number: Int
	"""
	The variant of the question number that this question is
	"""
	variant: Int
	"""
	The text of the question (the readable question itself)
	"""
	text: String
	"""
	The amount of points this question is worth
	"""
	points: Float
	"""
	The quiz this question belongs to
	"""
	parentQuiz: ID
}

input CreateAnswer {
	"""
	The actual human readable text of this answer
	"""
	text: String!
	"""
	If this possible is marked as a correct response
	"""
	correct: Boolean!
	"""
	The weight towards total points this answer will have default is evenly distributed for each correct answer in a question
	"""
	weight: Float
	"""
	The index of the answer when listed (A, B, C, D, etc.)
	"""
	index: String
	"""
	The question that this answer belongs to
	"""
	parentQuestion: ID!
}

input UpdateAnswer {
	"""
	The actual human readable text of this answer
	"""
	text: String
	"""
	If this possible is marked as a correct response
	"""
	correct: Boolean
	"""
	The weight towards total points this answer will have default is evenly distributed for each correct answer in a question
	"""
	weight: Float
	"""
	The index of the answer when listed (A, B, C, D, etc.)
	"""
	index: String
	"""
	The question that this answer belongs to
	"""
	parentQuestion: ID
}

input QuizSubmission {
	"""
	The student who submitted the quiz
	"""
	student: ID!
	"""
	The quiz Instance this is a submission for.
	"""
	quizInstance: ID!
	"""
	The list of answers that were provided for this quiz
	"""
	answers: [ID!]!
}

# TODO: Update documentation for update mutations
type Mutation {
	"""
	Create a new quiz record and associate it with its parent Module
	"""
	createQuiz(input: CreateQuiz): Quiz!
	"""
	Update a single quiz record given its document ID. Most fields can be updated through this query.
	"""
	updateQuiz(id: ID!, values: UpdateQuiz!): [Quiz!]!
	"""
	Delete a quiz record given its document ID
	"""
	deleteQuiz(id: ID!): Quiz!
	"""
	Create a new instance of a quiz. Give just the ID of the parent quiz.
	This will randomly select the correct number of questions using random variants of each question
	"""
	createQuizInstance(quizID: ID!): QuizInstance!
	"""
	Delete an existing quiz instance given its document ID.
	This will not delete the related quiz result.
	"""
	deleteQuizInstance(id: ID!): QuizInstance!
	"""
	Create a new question. This new question must be associated with a question pool to be created
	"""
	createQuestion(input: CreateQuestion): Question!
	"""
	Update a single question record given its document ID. Most fields can be updated through this query.
	"""
	updateQuestion(id: ID!, values: UpdateQuestion!): [Question!]!
	"""
	Delete an existing question record give its document ID.
	It is important to note that deleting a question will also delete ALL associated Answer records
	"""
	deleteQuestion(id: ID!): Question!
	"""
	Create a new answer to a question. The answer must be associated with a question when created.
	"""
	createAnswer(input: CreateAnswer!): Answer!
	"""
	Update a single answer record given its document ID. Most fields can be updated through this query.
	"""
	updateAnswer(id: ID!, values: UpdateAnswer!): [Answer!]!
	"""
	Delete an answer record based on its document ID
	"""
	deleteAnswer(id: ID!): Answer!
	"""
	Submit a quiz to be graded. This will create a QuizResultRecord with the users score.
	"""
	submitQuiz(input: QuizSubmission!): QuizResult
	"""
	Update the score of a Quiz Result. Takes the quiz id and the new score.
	"""
	updateQuizScore(id: ID!, newScore: Float!): QuizResult
	"""
	Delete a quiz Submission given its document ID
	"""
	deleteQuizResult(id: ID!): QuizResult
}
